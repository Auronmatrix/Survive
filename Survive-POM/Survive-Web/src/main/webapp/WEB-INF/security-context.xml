<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                    http://www.springframework.org/schema/security 
                    http://www.springframework.org/schema/security/spring-security-3.2.xsd
                    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
    
    <!-- We will be defining all security related configurations in this file -->
    
<!--    <http use-expressions="true">
        <intercept-url pattern="/**" access="isAuthenticated()"/>  this means all URL in this app will be checked if user is authenticated 
        <form-login/>  We will just use the built-in form login page in Spring 
        <logout logout-url="/logout" logout-success-url="/index"/>  the logout url we will use in JSP 
    </http>
    
    <authentication-manager>
        <authentication-provider>
             Normally, in this part, you will declare the source of your users
                 But for simplicity, we will hard-code the users. This is very useful while testing setup 
            <user-service>
                <user name="joseph" password="bagnes" authorities="Admin, User"/>
                <user name="bernabe" password="jose" authorities="User"/>
            </user-service>
        </authentication-provider>
    </authentication-manager>-->
    
    <http auto-config="true" use-expressions="true" >
        <intercept-url pattern="/locations/*" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN', 'ROLE_GUEST')" />
        <intercept-url pattern="/efficiencies/*" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN', 'ROLE_GUEST')" />
        <intercept-url pattern="/monster/*" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" /> 
        <intercept-url pattern="/area/*" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" /> 
        <intercept-url pattern="/weapon/*" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" /> 
        <form-login login-page="/login.jsp" default-target-url="/index.jsp"
                    authentication-failure-url="/loginerror" />
        <logout logout-success-url="/logout.jsp" />
        <access-denied-handler error-page="/403.jsp"/>
        
    </http>
        
    <authentication-manager>
        <authentication-provider>
            <user-service>
                <user name="admin" password="pass" authorities="ROLE_ADMIN" />
                <user name="user" password="pass" authorities="ROLE_USER" />
                <user name="guest" password="pass" authorities="ROLE_GUEST" />
            </user-service>
        </authentication-provider>
    </authentication-manager>
        
<!--    <beans:bean id="roleVoter" class="org.springframework.security.access.vote.RoleHierarchyVoter">
        <beans:constructor-arg ref="roleHierarchy" />
    </beans:bean>
    <beans:bean id="roleHierarchy"
                class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
        <beans:property name="hierarchy">
            <beans:value>
                ROLE_ADMIN > ROLE_USER          
                ROLE_USER > ROLE_GUEST
            </beans:value>
        </beans:property>
    </beans:bean>-->

</beans:beans>